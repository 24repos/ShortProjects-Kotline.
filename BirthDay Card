package com.example.birthdaycard

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.animation.animateColor
import androidx.compose.animation.core.LinearEasing
import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.animation.core.tween
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.birthdaycard.ui.theme.BirthDayCardTheme


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            BirthDayCardTheme {
                AnimatedBg()
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = Color.Transparent
                ) {
                GreetingImage(message = getString(R.string.birthday_text), from = getString(R.string.from_text))
                }
            }
        }
    }
}

@Composable
fun GreetingText(message: String, from: String, modifier: Modifier = Modifier) {
    Column(modifier = modifier.fillMaxSize().padding(top = 32.dp),
        verticalArrangement = Arrangement.Top,
        horizontalAlignment = Alignment.CenterHorizontally) {

        Text(text = message,
            fontSize = 80.sp,
            lineHeight = 116.sp,
            textAlign = TextAlign.Center)

        //Spacer(modifier = Modifier.height(100.dp))

        Text( text = from,
        fontSize = 35.sp,
        modifier = Modifier
            .padding(16.dp)
            .align(Alignment.CenterHorizontally) )
        }
}

@Composable
fun AnimatedBg(modifier: Modifier = Modifier){
    val infiniteTransition = rememberInfiniteTransition(label = "")

    val backgroundColor by infiniteTransition.animateColor(
        initialValue = Color(0xFFB3E5FC),
        targetValue = Color(0xFF81D4FA),
        animationSpec = infiniteRepeatable(
            animation = tween(durationMillis = 3000, easing = LinearEasing),
            repeatMode = RepeatMode.Reverse
        ), label = ""
    )
    // Apply the animated background color
    Box( modifier = modifier.fillMaxSize().background(backgroundColor) )
}

 @Composable
 fun GreetingImage(message: String, from: String, modifier: Modifier = Modifier) {
     val image = painterResource(id = R.drawable.cake)
     Box(
         modifier = modifier.fillMaxSize()
     ) {
         AnimatedBg(modifier = Modifier.fillMaxSize())

         Image(
             painter = image,
             contentDescription = null,
             contentScale = ContentScale.Crop,
             modifier = Modifier.matchParentSize(),
             alpha = 0.7F
         )
         GreetingText(message, from, modifier = Modifier
             .fillMaxSize()
             .padding(8.dp))
     }
 }

@Preview(showBackground = true)
@Composable
fun BirthdayCardPreview() {
    BirthDayCardTheme {
        GreetingImage(
            message = stringResource(id = R.string.birthday_text),
            from = stringResource(id = R.string.from_text)
        )
    }
}
